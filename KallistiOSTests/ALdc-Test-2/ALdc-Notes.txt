ALdc Notes

From Basic:
- What is "const ALCchar *defaultDeviceName = argv[1];"" for? I've never ran a program on the dc that uses main arguments so idk what this would be fetching
- ~~Can we have multiple listeners, or do all sources use the same one?~~
	- Only one listener
- ~~Line 164, there's a random alGetError(); and the sample doesn't check its output. Is this a mistake or does it have a purpose?~~
	- It resets the error state. No idea why we'd need to do this when we are already checking for errors, but it is recommented
- Line 192 the source is set to not-looping, but later its set to "1". I assume thats a mistake and the not-looping call doesn't need to be there.
- What does line 195 do? Setting a buffer on soundram or main ram?
- Does the program ever go beyond line 225 (thd_pass())?
- Compared to the snd_sfx lib in KOS, you can load sound effects into memory then play at will. Is ALdc as simple as that? I'm not sure because to me it looks a lot more manual and a bit intimidating

From Streaming:
~~Also in the streaming example in LoadWAVFile() comments out the fclose() call which would probably cause issues~~

Nm, the file pointer is a global and for both calls its closed at later points. So the file pointer for the streaming audio file must be opened for as long as you want to stream it



- OpenAL revolves around the use of three fundamental objects – Buffers, Sources, and a Listener
- A buffer can be filled with audio data, and can then be attached to a source
- Source can be positioned and played
- How the source is heard is determined by its position and orientation relative to the Listener object (there is only one Listener)
- The "Context" seems to be the sources and listener and the buffers are outside the context
	- All of these things are within the "device"

-  Within that context, one listener object is implied, and a multitude of source objects can be created. Each source can have one or more buffers objects attached to it.
	- Buffer objects are not part of a specific context – they are shared among all contexts on one device.
- alcOpenDevice(NULL) is the default device

- On PC Systems, a number of different OpenAL renderering devices may co-exist. For example a “native” renderer specific to the user’s high-end soundcard, and a host-based software fallback renderer. On platforms where multiple renderers can be present, an OpenAL application may require the ability to identify the different devices available, in order to give the end-user a choice of device. OpenAL’s Enumeration extension makes this possible.
	- I think I can ignore all of that (?)
- The buffer name zero is reserved as a “NULL Buffer" and is accepted by alSourcei(…, AL_BUFFER, …) as a valid buffer of zero length. The NULL Buffer is extremely useful for detaching buffers from a source which were attached using this call or with alSourceQueueBuffers. 
- Once a buffer has been attached to a source, the source can play the buffer using alSourcePlay
- When the attached buffer(s) are done playing, the source will progress to the AL_STOPPED state
- Related to playback: alSourcePlayv, alSourcePause, alSourcePausev, alSourceRewind, alSourceRewindv, alSourceStop, alSourceStopv
	- The 'v' versions seem to apply the function to multiple sources
	- The "rewind" function stops the source and sets its state to AL_INITIAL


QUESTIONS
- what exactly is a "buffer". I think the variable we are using is just a number/id, but it seems to point to a buffer in memory. Is this in RAM or Sound RAM?
- Once I've setup the context and device, do I need to worry about them again until shutdown? Docs seem to suggest they need to know about the sources/buffers/listener, but I don't see why
